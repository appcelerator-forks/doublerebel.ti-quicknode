// Generated by CoffeeScript 1.6.3
(function() {
  var $, qNode, qNodeList;

  qNode = function(el) {
    var k, superpowers, v;
    superpowers = {
      attr: function(attr) {
        return this.getAttribute(attr);
      },
      children: function() {
        return new qNodeList(this.childNodes);
      },
      find: function(filter) {
        return this.children().filter(filter);
      },
      txt: function() {
        return this.firstChild.textContent;
      },
      first: function() {
        return qNode(this.firstChild);
      },
      last: function() {
        return qNode(this.lastChild);
      },
      next: function() {
        return qNode(this.nextSibling);
      },
      prev: function() {
        return qNode(this.previousSibling);
      },
      parent: function() {
        return qNode(this.parentNode);
      }
    };
    for (k in superpowers) {
      v = superpowers[k];
      el[k] = v;
    }
    return el;
  };

  qNodeList = (function() {
    function qNodeList(nodeList) {
      var i;
      this.length = nodeList.length;
      i = 0;
      while (i < nodeList.length) {
        this[i] = qNode(nodeList.item(i++));
      }
    }

    qNodeList.prototype.filter = function(filter) {
      var key, node, value, _i, _j, _k, _len, _len1, _len2, _ref, _results, _results1, _results2;
      if (typeof filter === "string") {
        if (filter.indexOf("=" === -1)) {
          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            node = this[_i];
            if (node.tagName === filter) {
              _results.push(node);
            }
          }
          return _results;
        } else {
          _ref = filter.split("="), key = _ref[0], value = _ref[1];
          _results1 = [];
          for (_j = 0, _len1 = this.length; _j < _len1; _j++) {
            node = this[_j];
            if ((node.getAttribute(key)) === value) {
              _results1.push(node);
            }
          }
          return _results1;
        }
      } else {
        _results2 = [];
        for (_k = 0, _len2 = this.length; _k < _len2; _k++) {
          node = this[_k];
          if (filter(qNode(node))) {
            _results2.push(node);
          }
        }
        return _results2;
      }
    };

    qNodeList.prototype.find = function(filter) {
      var els;
      els = this.filter(filter);
      if (els.length) {
        return qNode(els[0]);
      }
    };

    return qNodeList;

  })();

  $ = function(tag, xml) {
    var nodeList;
    nodeList = xml.getElementsByTagName(tag);
    return new qNodeList(nodeList);
  };

  module.exports = {
    qNode: qNode,
    qNodeList: qNodeList,
    $: $
  };

}).call(this);

/*
//@ sourceMappingURL=quicknode.map
*/
